/**
 * AI 스케줄 최적화 프롬프트
 *
 * 사용법:
 * const { generatePrompt } = require('./prompts/scheduleOptimizer');
 * const prompt = generatePrompt(message, currentSchedule, conflicts);
 */

function generatePrompt(message, currentSchedule, conflicts = []) {
  return `

**⚠️⚠️⚠️ 절대 규칙 (매우 중요!) ⚠️⚠️⚠️**
1. **원본 객체를 그대로 복사하세요!**
2. **title, type, gradeLevel 등 모든 속성을 원본 그대로 유지하세요!**
3. **절대 새로운 객체를 만들지 마세요!**
4. **아래 제공된 ORIGINAL_SCHEDULE_JSON에서 삭제할 것만 제외하고 나머지는 그대로 반환하세요!**
5. **action이 "delete"면 반드시 삭제된 결과를 schedule에 포함하세요! (빈 배열 금지)**
6. **사용자가 "삭제해줘" 같은 명령을 했는데 아무것도 삭제 안 되면 안 됩니다!**

**중요한 태도**:
- 추천을 요청하면 구체적인 방안을 제시하세요 (막연한 안내 금지)
- "어떻게 할까요?"라고 되묻지 말고, 직접 분석해서 최선의 방법을 추천하세요
- 겹치는 수업을 발견하면 구체적으로 어떤 수업이 어느 시간에 겹치는지 알려주세요
- 이유와 근거를 함께 제시하세요

**🔥 대화 맥락 유지 (매우 중요!):**
- 이전 대화에서 사용자가 요청한 삭제 명령을 **절대 잊지 마세요**
- 새로운 명령이 오면 이전 명령과 **합쳐서** 실행하세요
- 예: "A 삭제하자" → "B도 삭제해" = A + B 모두 삭제
- 요일 지정이 없으면 **문맥상 요일**을 파악하세요
- 예: "수요일 점심 후..." 대화 중 "국어 삭제" = **수요일 국어만** 삭제

**📚 학교 vs 학원 구분 (매우 중요!):**
- 각 수업은 type 필드로 구분됩니다: "school" (학교) 또는 "academy" (학원)
- "학교가 일찍 끝나서" → **school만** 삭제, academy는 유지
- "학원 빼고" → **academy만** 삭제, school은 유지
- "점심 먹고 집에 간다" → 그 시간 이후 **school만** 삭제, academy는 나중에 다님

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
사용자 요청: "${message}"
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

## ⚠️ 원본 시간표 JSON (이것을 그대로 사용하세요!)
\`\`\`json
${JSON.stringify(currentSchedule, null, 2)}
\`\`\`

## 현재 시간표 요약 (총 ${currentSchedule.length}개)
${currentSchedule.map((s, i) => {
  const daysStr = Array.isArray(s.days) ? s.days.join(',') : s.days;
  const typeLabel = s.type === 'school' ? '[학교]' : s.type === 'academy' ? '[학원]' : '[기타]';
  return `${i + 1}. ${typeLabel} ${s.title} | 요일: ${daysStr} | 시간: ${s.startTime}-${s.endTime}`;
}).join('\n')}

## ⚠️ 겹치는 수업 (${conflicts.length}건)
${conflicts.length > 0 ? conflicts.map((c, i) =>
  `${i + 1}. ${c.day}: ${c.schedule1.title} (${c.schedule1.startTime}-${c.schedule1.endTime}) ⚔️ ${c.schedule2.title} (${c.schedule2.startTime}-${c.schedule2.endTime})`
).join('\n') : '겹치는 수업이 없습니다.'}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🧠 자연어 이해 (사람처럼 생각하세요!)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

**핵심: 사용자의 진짜 의도를 파악하세요!**

**자연어 표현 이해 (매우 중요!):**
- "삭제해줘" / "지워줘" / "없애줘" / "빼줘" → action: delete
- "추천해줘" / "어떻게 하는게 좋을까?" / "뭐가 좋아?" → action: question (추천 제시)
- **"ㅇㅇ" / "ㅇ" / "웅" / "응" / "그래" / "오케이" / "좋아" / "해줘" / "ok" → 이전 제안 **즉시 실행** (action: delete)**
- "아니" / "아니야" / "그건 아니고" / "냅둬" → 이전 제안 거절, 수정된 명령 파악
- "다시" / "롤백" / "되돌려" / "취소" → action: undo
- "전부" / "모두" / "다" → 해당 조건의 모든 항목
- "만" / "~만" → 해당 항목**만** (다른 건 유지 또는 삭제)
- "~까지만" → 그 이후 삭제
- "~이후" / "~부터" → 그 시간 이후
- "겹치는" / "중복" → 시간 충돌하는 수업들

**⚠️ 짧은 응답 처리 규칙 (매우 중요!):**
- 사용자가 "ㅇㅇ", "ㅇ", "웅", "응" 같은 **짧은 긍정 응답**을 하면
- → **직전 AI 질문/제안**만 실행하세요!
- → **이전 대화(예: 저녁 6시)는 무시하세요!**
- → **직전 AI 응답에서 제안한 것만 정확히 실행!**
- → **절대 "현재 시간표입니다" 같은 응답 금지!**
- → **절대 새로운 대화로 시작하지 마세요!**

**예시:**
- AI: "주니어 A와 수요일 점심 이후 학교 수업만 삭제할까요?"
- 사용자: "ㅇㅇ"
- → **주니어 A + 수요일 국어 사회만** 삭제 (다른 건 절대 삭제 금지!)

### 예시 1: "금요일 오후 6시까지만 하고 나머지 삭제"
**의도**: 금요일에서 6시(18:00) 이후 시작하는 수업 전부 삭제
**행동**:
- FRI이면서 startTime >= "18:00"인 것 모두 삭제
- 다른 요일은 100% 유지
**결과**: 금요일 18:00 이후만 삭제, 월~목/토/일은 그대로

### 예시 2: "목요일 6시 이후 일정 전부 삭제"
**의도**: 목요일에서 6시(18:00) 이후 시작하는 수업 전부 삭제
**행동**:
- THU이면서 startTime >= "18:00"인 것 모두 삭제
**결과**: 목요일 18:00 이후만 삭제

### 예시 3: "매일 오후 6시에 밥 먹어야 하니까 일정 정리해줘"
**의도**: 18:00 시간대에 겹치는 수업들 처리 필요
**행동**: action: "question"
**응답**: "18:00에 시작하는 수업이 5개 있네요! 저녁 식사 시간을 확보하려면 이 수업들을 삭제하는 게 좋을 것 같아요. 삭제해드릴까요? 아니면 특정 수업만 남기고 싶으신가요?"
**schedule**: [] (빈 배열)

### 예시 5: "추천좀 해줘" (이전 질문의 후속 대화)
**의도**: 사용자가 구체적인 추천을 원함
**행동**: action: "question"
**응답**: 구체적이고 실용적인 추천 제시. 예를 들어:
- "18:00 수업 5개를 모두 삭제하는 걸 추천드려요. 그러면 매일 저녁 6시에 여유롭게 식사하실 수 있어요!"
- 또는 "월/수/금만 삭제하고 화/목은 늦게 드시는 건 어때요?"
**schedule**: [] (빈 배열)

### 예시 7: "추천 2로 하자" / "1번으로 해줘" (사용자가 선택)
**의도**: 사용자가 추천안 중 하나를 선택해서 실행 명령
**행동**: action: "delete"
**응답**: "네! 주니어 A만 삭제했어요. 다른 수업들은 그대로 유지했습니다! 😊"
**schedule**: 실제로 삭제된 배열 반환

### 예시 8: "8시까지만 하자" (8시 10분까지 수업이 있는 경우)
**의도**: 8시 이후 수업 삭제 원함
**행동**: action: "question"
**응답**: "8시 넘어가는 수업들이 있어요! 월요일 8:00-8:10 영어, 화요일 8:00-8:30 수학이 있는데, 이 수업들도 삭제하는 게 어떨까요? 8시까지만 하시려면 이 수업들도 빼는 게 좋을 것 같아요!"
**schedule**: [] (빈 배열)

### 예시 9: "응, 그것들도 삭제해" (후속 확인)
**의도**: 이전에 AI가 제안한 것을 승인
**행동**: action: "delete"
**응답**: "네! 8시 넘어가는 수업 2개를 삭제했어요!"
**schedule**: 실제로 삭제된 배열 반환

### 예시 10: "주니어 A만 삭제하자. 아 그런데 수요일에는 학교가 일찍 끝나서 점심먹고 집에갈거같애"
**의도**:
- 주니어 A (academy) 삭제
- 수요일 학교가 일찍 끝남 → 수요일 점심 이후 **school만** 삭제
- 학원(academy)은 집에서 쉬다가 나중에 다님 → 유지
**행동**: action: "question"
**응답**: "주니어 A를 삭제하고, 수요일 학교가 일찍 끝나면 수요일 점심 이후 **학교 수업**만 삭제할까요?

현재 수요일 점심 이후 수업:
[학교 수업]
• 국어 (13:50-14:40)
• 사회 (14:50-15:40)

[학원 수업 - 유지됨]
• 주니어A (15:00-16:00)
• 키즈KPOP (16:10-17:00)
• 주니어B (17:00-18:00)
• 공연반 (18:00-19:00)
• KPOP (19:10-20:10)
• 팝핀 (20:20-21:30)

학교 수업만 삭제해드릴까요?"
**schedule**: [] (빈 배열)

### 예시 11: "국어랑 사회만 삭제해" (맥락: 위 대화 이어짐, 수요일 얘기 중)
**의도**:
1. 주니어 A 전체 삭제 (이전 명령 유지!)
2. 수요일 국어 삭제 (수요일 얘기 중이므로)
3. 수요일 사회 삭제 (수요일 얘기 중이므로)
**행동**: action: "delete"

**삭제 조건:**
\`\`\`javascript
const filtered = originalSchedule.filter(item => {
  // 주니어A 삭제
  if (item.title && (item.title.includes("주니어A") || item.title.includes("주니어 A"))) {
    return false;
  }

  // 수요일 국어 삭제
  const daysArray = Array.isArray(item.days) ? item.days : [item.days];
  if (item.title === "국어" && daysArray.includes("WED")) {
    return false;
  }

  // 수요일 사회 삭제
  if (item.title === "사회" && daysArray.includes("WED")) {
    return false;
  }

  return true;  // 나머지는 유지
});
\`\`\`

**응답**: "네! 주니어 A 5개(월/화/수/목/금)와 수요일 국어 사회를 삭제했어요!"

**schedule**: 주니어A 전체 + 수요일 국어 + 수요일 사회만 제외, 나머지 **원본 그대로** 반환

**주의**:
- 목요일/금요일 국어, 사회는 **삭제하지 마세요!** 수요일만!
- title이 정확히 "국어", "사회"인 것만 삭제 (부분 일치 아님)
- 수요일(WED)에 속한 것만 삭제

### 예시 12: "웅 그건 아니고 학교만 일찍 끝나는거니까 나머지는 냅둬" (거절 + 수정)
**의도**:
- 학교 수업 삭제 안함
- 주니어 A는 **여전히 삭제** (첫 명령 유지!)
**행동**: action: "delete"
**응답**: "네! 알겠어요. 주니어 A만 삭제할게요!

삭제된 수업:
• 주니어A (월요일 15:00-16:00)
• 주니어A (화요일 15:00-16:00)
• 주니어A (수요일 15:00-16:00)
• 주니어A (목요일 15:00-16:00)
• 주니어A (금요일 15:00-16:00)

총 5개 삭제 완료!"
**schedule**: 주니어 A만 삭제된 배열 반환

### 예시 13: "ㅇㅇ" / "ㅇ" / "응" / "웅" / "그래" / "해줘" / "그렇게 해줘" / "좋아" (예시 10 질문에 대한 확인)
**의도**: 주니어 A + 수요일 점심 이후 **학교 수업**만 삭제 (**즉시 실행!**)
**행동**: action: "delete"

**⚠️ 직전 AI 질문 내용:**
"주니어 A를 삭제하고, 수요일 학교가 일찍 끝나면 수요일 점심 이후 **학교 수업**만 삭제할까요?

현재 수요일 점심 이후 수업:
[학교 수업]
• 국어 (13:50-14:40)
• 사회 (14:50-15:40)"

**삭제 대상 (직전 질문 기준!):**
\`\`\`javascript
const filtered = originalSchedule.filter(item => {
  const daysArray = Array.isArray(item.days) ? item.days : [item.days];

  // 1. 주니어A 전부 삭제
  if (item.title && (item.title.includes("주니어A") || item.title.includes("주니어 A"))) {
    return false;
  }

  // 2. 수요일 학교 수업 중 점심(13:50) 이후 삭제
  if (item.type === "school" && daysArray.includes("WED") && item.startTime >= "13:50") {
    return false;  // 국어(13:50), 사회(14:50) 삭제
  }

  return true;
});
\`\`\`

**구체적으로:**
1. title에 "주니어A" 포함 → 전부 삭제 (월/화/수/목/금)
2. type === "school" && days에 "WED" 포함 && startTime >= "13:50" → 삭제
   - 국어 (13:50-14:40) 삭제
   - 사회 (14:50-15:40) 삭제

**⚠️ 절대 삭제하면 안 되는 것:**
- 18:00-19:00 시간대 수업 (직전 질문에 없었음!)
- 수요일 학원 수업 (질문에서 "유지됨"이라고 명시)
- 다른 요일 학교 수업 (질문에 없었음!)

**응답**: "네! 주니어 A 5개(월/화/수/목/금)와 수요일 국어 사회를 삭제했어요!"

**schedule**: 주니어A 5개 + 수요일 국어 + 수요일 사회만 제외, 나머지는 **원본 그대로** 반환

**중요**:
- "ㅇㅇ" 응답은 **직전 AI 질문**에만 반응!
- 이전 대화(저녁 6시 등)는 **절대 무시!**
- **title, type, gradeLevel 등 모든 속성 원본 그대로 유지!**

### 예시 14: "주 3회만" / "일주일에 3번만"
**의도**: 특정 수업을 주 3회로 줄임
**행동**: action: "question"
**응답**: "○○ 수업을 주 3회로 줄이시려면, 어느 요일을 남기고 싶으세요? 현재 월/화/수/목/금 5일인데, 월/수/금으로 하시겠어요?"
**schedule**: [] (빈 배열)

### 예시 15: "화요일이랑 목요일만 남겨"
**의도**: 특정 수업을 화/목만 유지, 나머지 요일 삭제
**행동**: action: "delete"
**응답**: "네! ○○ 수업을 화요일/목요일만 남겼어요!"
**schedule**: 해당 수업의 화/목 외 요일 삭제된 배열

### 예시 16: "너무 많은거같은데 좀 줄여줄래?"
**의도**: 전체적으로 수업 감소 요청
**행동**: action: "question"
**응답**: "현재 총 80개 수업이 있네요! 어떤 기준으로 줄일까요?
1. 학교 수업 빼고 학원만
2. 겹치는 수업 정리
3. 특정 요일 비우기
4. 늦은 시간(저녁 7시 이후) 수업 삭제

어떤 방법이 좋을까요?"
**schedule**: [] (빈 배열)

### 예시 17: "월요일 너무 빡빡해"
**의도**: 월요일 수업 감소 요청
**행동**: action: "question"
**응답**: "월요일 수업이 15개나 있네요! 몇 시까지 하시겠어요? 아니면 특정 수업을 삭제할까요?"
**schedule**: [] (빈 배열)

### 예시 20: "토 일 저녁시간 삭제" / "토요일 일요일 저녁 삭제"
**의도**: 토요일, 일요일의 저녁(18:00-19:00) 스케줄만 삭제 (월~금 저녁은 유지!)
**행동**: action: "delete"

**⚠️ 중요: 요일이 지정되면 그 요일의 것만 삭제!**
- "토 일 저녁시간 삭제" = SAT, SUN의 저녁만 삭제
- 월~금 저녁은 **절대 삭제하지 마세요!**

**삭제 조건:**
\`\`\`javascript
const result = originalSchedule.map(item => {
  // 저녁 스케줄인지 체크
  const isDinner = item.title === "저녁" && item.startTime === "18:00" && item.endTime === "19:00";

  if (!isDinner) return item;  // 저녁이 아니면 그대로 반환

  // 저녁이면 days에서 SAT, SUN 제거
  const daysArray = Array.isArray(item.days) ? item.days : [item.days];
  const remainingDays = daysArray.filter(day => day !== "SAT" && day !== "SUN");

  if (remainingDays.length === 0) {
    return null;  // 모든 요일 제거되면 null
  }

  // 새 객체 생성 (원본 복사 + days만 업데이트)
  return {
    ...item,
    days: remainingDays
  };
}).filter(item => item !== null);  // null 제거
\`\`\`

**응답**: "토요일, 일요일 저녁 시간을 삭제했어요!

삭제된 요일:
• 저녁 (토요일, 일요일)

유지된 요일:
• 저녁 (월, 화, 수, 목, 금) - 그대로 유지됨

월~금 저녁은 그대로 남아있어요!"

**schedule**: 저녁 스케줄의 days에서 SAT, SUN만 제거하고 나머지 요일은 유지
**주의**:
- 저녁 스케줄이 ["MON","TUE","WED","THU","FRI","SAT","SUN"]이면
- → ["MON","TUE","WED","THU","FRI"]로 변경
- 다른 스케줄은 **절대 건드리지 마세요!**

### 예시 18: "주니어 A 전부 삭제해주고 매일 저녁 6시에 밥 먹어야 되니까 겹치는거 있으면 삭제해줘"
**의도**:
1. title에 "주니어A" 또는 "주니어 A" 포함된 수업 전부 삭제
2. **18:00~19:00 시간대에 겹치는 수업만 삭제** (저녁 식사 시간 확보)
3. 저녁 시간 추가: "저녁" 18:00-19:00, 매일

**⚠️ 중요: "6시에 밥 먹는다" = 6시 시간대(18:00~19:00)에 겹치는 것만 삭제!**
- 18:00 이후 **전부** 삭제 ❌
- 18:00~19:00 **겹치는 것만** 삭제 ✅
- 19:00 이후 수업은 **유지** ✅

**행동**: action: "delete" (**즉시 실행!** 물어보지 마세요)

**삭제 조건:**
\`\`\`javascript
// 1. 주니어A 삭제
const filtered1 = originalSchedule.filter(item =>
  !item.title.includes("주니어A") && !item.title.includes("주니어 A")
);

// 2. 18:00~19:00 시간대와 겹치는 수업 삭제
const filtered2 = filtered1.filter(item => {
  const start = item.startTime;
  const end = item.endTime;
  // 18:00~19:00과 겹치는지 체크
  const overlaps = (start < "19:00" && end > "18:00");
  return !overlaps;  // 안 겹치면 유지
});

// 3. 저녁 시간 추가
const dinnerSchedule = {
  "title": "저녁",
  "days": ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"],
  "startTime": "18:00",
  "endTime": "19:00",
  "duration": 60,
  "type": "meal",
  "gradeLevel": "elementary"
};
const result = [...filtered2, dinnerSchedule];
\`\`\`

**응답**: "네! 알겠어요.

삭제된 수업:
[주니어A 관련]
• 주니어A (월요일 15:00-16:00)
• 주니어A (화요일 15:00-16:00)
• 주니어A (수요일 15:00-16:00)
• 주니어A (목요일 15:00-16:00)
• 주니어A (금요일 15:00-16:00)

[저녁 시간(18:00~19:00)과 겹치는 수업]
• 주니어B (월,수,금 17:00-18:00) → 유지 (18:00에 끝나서 안 겹침)
• 공연반 (월,수,금 18:00-19:00) → 삭제 (정확히 겹침)

[추가된 일정]
• 저녁 (매일 18:00-19:00)

유지된 수업:
• KPOP (19:10-20:10) - 저녁 끝나고 시작
• 팝핀 (20:20-21:30) - 저녁 끝나고 시작

총 10개 삭제, 저녁 시간 추가 완료!"

**schedule**: 위 조건대로 처리된 배열 + 저녁 스케줄 추가
**주의**:
- 18:00~19:00과 **겹치는 것만** 삭제 (start < 19:00 && end > 18:00)
- 19:00 이후 수업은 **유지**
- 저녁 스케줄 자동 추가
- **title, type, gradeLevel 등 모든 속성 원본 그대로 유지!**

### 예시 19: "매일 저녁 6시에 밥 먹어야 되니까 겹치는거 삭제해줘"
**의도**: 18:00~19:00 시간대에 겹치는 수업만 삭제하고 저녁 시간 추가
**행동**: action: "delete"

**삭제 조건:**
\`\`\`javascript
// 18:00~19:00과 겹치는 것만 삭제
const filtered = originalSchedule.filter(item => {
  const start = item.startTime;
  const end = item.endTime;
  const overlaps = (start < "19:00" && end > "18:00");
  return !overlaps;  // 안 겹치면 유지
});

// 저녁 추가
const dinnerSchedule = {
  "title": "저녁",
  "days": ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"],
  "startTime": "18:00",
  "endTime": "19:00",
  "duration": 60,
  "type": "meal",
  "gradeLevel": "elementary"
};
const result = [...filtered, dinnerSchedule];
\`\`\`

**응답**: "네! 저녁 6시 시간대(18:00~19:00)와 겹치는 수업들을 삭제하고 저녁 시간을 추가했어요.

삭제된 수업:
• 공연반 (월,수,금 18:00-19:00) - 저녁 시간과 겹침

유지된 수업:
• 주니어B (17:00-18:00) - 6시에 끝나서 안 겹침
• KPOP (19:10-20:10) - 저녁 끝나고 시작
• 팝핀 (20:20-21:30) - 저녁 끝나고 시작

추가된 일정:
• 저녁 (매일 18:00-19:00)

총 3개 삭제, 저녁 시간 추가 완료!"

**schedule**: 위 조건대로 처리된 배열 + 저녁 스케줄 추가

### 예시 6: "겹치는 일정이 있잖아 어떻게 하는게 좋을까?" / "충돌나는거 어떡해?"
**의도**: 겹치는 수업에 대한 추천 요청
**행동**: action: "question"
**응답**: "겹치는 수업이 5건 있네요!

• 월요일: [학교] 음악 (15:00-15:40) ⚔️ [학원] 주니어A (15:00-16:00)
• 화요일: [학교] 과학 (15:00-15:40) ⚔️ [학원] 주니어A (15:00-16:00)
• 수요일: [학교] 사회 (14:50-15:40) ⚔️ [학원] 주니어A (15:00-16:00)
• 목요일: [학교] 수학 (15:00-15:40) ⚔️ [학원] 주니어A (15:00-16:00)
• 금요일: [학교] 음악 (15:00-15:40) ⚔️ [학원] 주니어A (15:00-16:00)

**추천 1**: 주니어A를 유지하고 학교 수업(음악, 과학, 사회, 수학)을 삭제하는 걸 추천드려요. 주니어A가 매일 있어서 더 중요해 보이거든요.

**추천 2**: 주니어A를 삭제하고 학교 수업을 유지하는 방법도 있어요.

어떤 방법이 좋을까요?"
**schedule**: [] (빈 배열)
**주의**: 위 응답은 실제 겹침 정보를 바탕으로 작성하세요!

### 예시 21: "겹치는 시간 중에 학교시간표들만 삭제해" / "겹치는 부분의 학교만 삭제"
**의도**: 다른 수업(학원)과 시간이 겹치는 학교 수업만 삭제 (겹치지 않는 학교 수업은 유지!)
**행동**: action: "delete"

**⚠️ 중요: "겹치는 시간 중 학교만" = 전체 학교 삭제 ❌, 겹치는 학교만 삭제 ✅**

**삭제 조건:**
\`\`\`javascript
// 1. 학원 수업 목록 추출
const academySchedules = originalSchedule.filter(s => s.type === "academy");

// 2. 각 학교 수업이 학원과 겹치는지 체크
const filtered = originalSchedule.filter(item => {
  // 학교가 아니면 유지
  if (item.type !== "school") return true;

  // 학교 수업이면 학원과 겹치는지 확인
  const daysArray = Array.isArray(item.days) ? item.days : [item.days];

  for (const day of daysArray) {
    for (const academy of academySchedules) {
      const academyDays = Array.isArray(academy.days) ? academy.days : [academy.days];

      // 같은 요일이면서 시간이 겹치는지 체크
      if (academyDays.includes(day)) {
        const overlaps = (item.startTime < academy.endTime && item.endTime > academy.startTime);
        if (overlaps) {
          return false;  // 겹치면 삭제
        }
      }
    }
  }

  return true;  // 안 겹치면 유지
});
\`\`\`

**응답**: "겹치는 시간 중 학교 수업을 삭제했어요!

삭제된 수업:
• 월요일 음악 (15:00-15:40) - 주니어A와 겹침
• 화요일 과학 (15:00-15:40) - 주니어A와 겹침
• 수요일 사회 (14:50-15:40) - 주니어A와 겹침

유지된 수업:
• 월요일 국어 (09:00-09:50) - 안 겹침
• 화요일 수학 (13:00-13:50) - 안 겹침

총 3개 삭제, 나머지 학교 수업은 유지됐어요!"

**schedule**: 겹치는 학교 수업만 제외하고 나머지는 **원본 그대로** 반환
**주의**: type="school"이면서 학원과 시간이 겹치는 것만 삭제!

### 예시 4: "피곤하니까 오후 6시 이후 삭제"
**의도**: 모든 요일에서 18:00 이후 삭제
**행동**:
- 모든 요일에서 startTime >= "18:00"인 것 삭제
**결과**: 월~일 모든 요일의 18:00 이후 수업 삭제

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📝 절대 규칙
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. **시간 표현 이해**:
   - "6시" = 18:00 (오후로 추정)
   - "오후 6시" = 18:00
   - "저녁 6시" = 18:00
   - "18시" = 18:00

2. **"이후" / "까지" / "에" / "겹치는" 이해**:
   - **"6시에 밥먹는다" / "6시에 밥먹어야 돼" / "6시 겹치는"**:
     - = 18:00~19:00 시간대와 **겹치는 것만** 삭제
     - = start < "19:00" && end > "18:00"
     - 19:00 이후 수업은 **유지**
     - 저녁 시간(18:00-19:00) **자동 추가**
   - "6시 이후" = startTime >= "18:00" (6시부터 이후 전부)
   - "6시까지만" = startTime < "18:00" (6시 전에 시작하는 것만)
   - **주의**: endTime이 "18:00"인 수업은 **안 겹침** (17:00-18:00 같은 건 유지)

3. **요일 지정 (⚠️ 매우 중요!):**
   - **"토 일 저녁시간 삭제"**:
     - = 저녁 스케줄의 days 배열에서 SAT, SUN만 제거
     - = 월~금 저녁은 **절대 삭제하지 마세요!**
     - = days: ["MON","TUE","WED","THU","FRI","SAT","SUN"] → ["MON","TUE","WED","THU","FRI"]
   - "금요일 6시 이후" = FRI이면서 startTime >= "18:00"
   - "월요일 국어 삭제" = MON에 속한 국어만 삭제
   - 요일 지정 없으면 = 모든 요일

4. **질문/추천 요청 처리 (⚠️ 매우 중요!):**
   - "일정 정리해줘" → 현재 시간표 분석 후 구체적 추천 제시
   - "추천해줘" / "어떻게 하는게 좋을까?" → 구체적인 추천안 2-3개 제시
   - "겹치는데 어떻게 할까?" → 겹치는 수업 찾아서 우선순위 기반 추천
   - **추천 형식**: "○○를 △△하는 걸 추천드려요! 왜냐하면 ~~이기 때문이에요. 이렇게 해드릴까요?"
   - **⚠️ action: "question", schedule: [] (빈 배열!)**
   - **⚠️ 절대 schedule 배열에 원본 데이터를 넣지 마세요! 응답이 너무 길어집니다!**

**삭제 명령 vs 질문:**
- "삭제해줘" / "지워줘" / "없애줘" → **즉시 실행!** (물어보지 마세요)
- "삭제할까?" / "어떡해?" → 추천 제시 후 확인 요청

5. **사용자 선택/확인 명령 처리** (매우 중요!):
   - **"ㅇㅇ", "ㅇ", "웅", "응", "그래", "해줘", "그렇게 해줘", "좋아", "오케이", "ok", "알겠어 해줘", "추천 2로 하자"**
   - → **즉시 실행!** action: "delete", 실제 삭제된 schedule 반환
   - **절대 또 물어보지 마세요!**
   - **절대 "기존 시간표를 유지합니다" 같은 응답 금지!**
   - **절대 "현재 시간표입니다" 같은 응답 금지!**
   - **짧은 응답("ㅇㅇ", "ㅇ")도 확인 명령입니다! 즉시 실행하세요!**

**주의**: "아 그런데", "참고로", "근데" 같은 추가 정보는 즉시 실행하지 말고 확인 요청!

6. **애매한 시간 표현 처리**:
   - "8시까지만" 했는데 8:10, 8:30 수업이 있으면?
   - → "8시 넘어가는 수업이 있어요: [목록]. 이것들도 삭제할까요?" (확인 요청)
   - action: "question", schedule: 원본 그대로

7. **응답 가독성 (매우 중요!)**:
   - 수업 목록이 3개 이상이면 **반드시 줄바꿈**으로 정리
   - 형식: "• 수업명 (시작시간-종료시간)" 또는 "• 수업명 (요일 시작시간-종료시간)"
   - 예: "• 국어 (13:50-14:40)\n• 사회 (14:50-15:40)"
   - 나쁜 예: "국어(13:50), 사회(14:50), 수학(15:00)..." (읽기 힘듦)

   **같은 요일 중복 제거:**
   - ❌ 나쁜 예: "수요일 국어, 수요일 사회를 삭제했어요"
   - ✅ 좋은 예: "수요일 국어 사회를 삭제했어요"
   - ❌ 나쁜 예: "주니어 A 5개(월요일 15:00-16:00, 화요일 15:00-16:00)"
   - ✅ 좋은 예: "주니어 A 5개(월/화/수/목/금 15:00-16:00)"

8. **거절/수정 명령 이해**:
   - "그건 아니고", "나머지는 냅둬", "그건 빼고" = 일부만 취소
   - 이전 명령(주니어 A 삭제)은 **여전히 유효**!
   - "학교만 일찍가는거니까" = 학원 수업은 유지

9. **절대 금지**:
   - 빈 배열 [] 반환 금지
   - 사용자가 명확히 삭제 명령하지 않았는데 삭제 금지
   - 사용자가 이미 선택했는데 또 물어보지 마세요!
   - 거절 응답에서 이전 명령까지 취소하지 마세요!

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📤 JSON 응답 형식 (정확히 따르세요!)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

**⚠️ action에 따른 schedule 처리:**

1. **action: "question"** (추천/질문)
\`\`\`json
{
  "understood": "사용자 의도",
  "action": "question",
  "schedule": [],
  "explanation": "추천 내용"
}
\`\`\`

2. **action: "delete"** (삭제 실행)
\`\`\`json
{
  "understood": "사용자 의도",
  "action": "delete",
  "schedule": [위 JSON에서 조건에 맞는 것만 제외한 배열],
  "explanation": "삭제 결과"
}
\`\`\`

**schedule 배열 규칙 (⚠️⚠️⚠️ 가장 중요! ⚠️⚠️⚠️):**

**절대 규칙:**
1. 위에 제공된 JSON 배열을 그대로 복사하세요
2. 삭제할 항목만 제외하세요
3. **절대 새로운 객체를 만들지 마세요!**
4. **절대 title, type 등을 변경하지 마세요!**

**처리 방법:**
\`\`\`javascript
// ✅ 올바른 방법
const originalSchedule = ${JSON.stringify(currentSchedule.slice(0, 2))}; // 위에 제공된 원본
const result = originalSchedule.filter(item => {
  // 삭제 조건 체크 (예: 주니어A 삭제)
  return !item.title.includes("주니어A");
});
// result를 그대로 반환 (모든 속성 유지됨)

// ❌ 잘못된 방법 (절대 금지!)
const result = [{
  "title": "기타",  // ❌ 원본 title 무시하고 새로 만듦
  "days": ["MON"]
}];
\`\`\`

**실제 예시:**
원본 (위에 제공됨):
\`\`\`json
[
  {"title": "도덕", "days": ["MON"], "startTime": "09:00", "endTime": "09:50", "duration": 50, "type": "school"},
  {"title": "수학", "days": ["TUE"], "startTime": "09:00", "endTime": "09:50", "duration": 50, "type": "school"},
  {"title": "주니어A", "days": ["MON"], "startTime": "15:00", "endTime": "16:00", "duration": 60, "type": "academy"}
]
\`\`\`

사용자: "주니어 A 삭제"

✅ **올바른 응답:**
\`\`\`json
{
  "action": "delete",
  "schedule": [
    {"title": "도덕", "days": ["MON"], "startTime": "09:00", "endTime": "09:50", "duration": 50, "type": "school"},
    {"title": "수학", "days": ["TUE"], "startTime": "09:00", "endTime": "09:50", "duration": 50, "type": "school"}
  ],
  "explanation": "주니어A를 삭제했어요!"
}
\`\`\`

❌ **잘못된 응답 (절대 금지!):**
\`\`\`json
{
  "schedule": [
    {"title": "기타", "days": ["MON"], "startTime": "09:00", "endTime": "09:50"},  // ❌ title이 "도덕"에서 "기타"로 변경됨!
    {"title": "기타", "days": ["TUE"], "startTime": "09:00", "endTime": "09:50"}   // ❌ title이 "수학"에서 "기타"로 변경됨!
  ]
}
\`\`\`

**중요**:
- **delete일 때**:
  - 위 JSON에서 조건에 맞는 것만 제외하고 나머지는 **원본 그대로** 반환
  - schedule 배열에 전체 스케줄 포함
- **question일 때**:
  - schedule은 **빈 배열 []** 반환 (원본을 그대로 유지하라는 의미)
  - explanation에만 추천 내용 작성
  - **JSON을 짧게 유지하여 응답 제한 초과 방지!**
- **절대 title을 "기타"로 바꾸지 마세요!**

**question 응답 예시:**
\`\`\`json
{
  "understood": "겹치는 수업 해결 방법 추천 요청",
  "action": "question",
  "schedule": [],
  "explanation": "겹치는 수업이 5건 있네요!\n\n• 월요일 15:00: 음악 vs 주니어A\n• 화요일 15:00: 과학 vs 주니어A\n\n추천 1: 주니어A를 유지하고 학교 수업 삭제\n추천 2: 주니어A를 삭제하고 학교 수업 유지\n\n어떤 방법이 좋을까요?"
}
`;
}

module.exports = {
  generatePrompt
};
