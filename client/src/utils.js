// ÏòÅÏñ¥ ÏöîÏùºÏùÑ ÌïúÍ∏ÄÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
export const translateEnglishDays = (text) => {
   const dayMap = {
      'monday': 'ÏõîÏöîÏùº',
      'tuesday': 'ÌôîÏöîÏùº', 
      'wednesday': 'ÏàòÏöîÏùº',
      'thursday': 'Î™©ÏöîÏùº',
      'friday': 'Í∏àÏöîÏùº',
      'saturday': 'ÌÜ†ÏöîÏùº',
      'sunday': 'ÏùºÏöîÏùº'
   };

   let translatedText = text;
   Object.keys(dayMap).forEach(englishDay => {
      const regex = new RegExp(`\\b${englishDay}\\b`, 'gi');
      translatedText = translatedText.replace(regex, dayMap[englishDay]);
   });

   return translatedText;
};

// ÎÇ†Ïßú Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
const formatDate = (date, format = 'YYYY-MM-DD') => {
   const d = new Date(date);
   const year = d.getFullYear();
   const month = String(d.getMonth() + 1).padStart(2, '0');
   const day = String(d.getDate()).padStart(2, '0');
   const hour = String(d.getHours()).padStart(2, '0');
   const minute = String(d.getMinutes()).padStart(2, '0');
   const second = String(d.getSeconds()).padStart(2, '0');

   const dayNames = ['ÏùºÏöîÏùº', 'ÏõîÏöîÏùº', 'ÌôîÏöîÏùº', 'ÏàòÏöîÏùº', 'Î™©ÏöîÏùº', 'Í∏àÏöîÏùº', 'ÌÜ†ÏöîÏùº'];
   const dayName = dayNames[d.getDay()];

   switch (format) {
      case 'YYYY-MM-DD dddd':
         return `${year}-${month}-${day} ${dayName}`;
      case 'MMÏõî DDÏùº':
         return `${month}Ïõî ${day}Ïùº`;
      case 'YYYY-MM-DD HH:mm:ss':
         return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
      default:
         return `${year}-${month}-${day}`;
   }
};

const addDays = (date, days) => {
   const result = new Date(date);
   result.setDate(result.getDate() + days);
   return result;
};

const addWeeks = (date, weeks) => {
   return addDays(date, weeks * 7);
};

const startOfWeek = date => {
   const result = new Date(date);
   const day = result.getDay();
   const diff = result.getDate() - day + (day === 0 ? -6 : 1); // ÏõîÏöîÏùº ÏãúÏûë
   result.setDate(diff);
   result.setHours(0, 0, 0, 0);
   return result;
};

const endOfWeek = date => {
   const result = startOfWeek(date);
   result.setDate(result.getDate() + 6);
   result.setHours(23, 59, 59, 999);
   return result;
};

// ‚úÖ Ï£ºÏ∞® Ïò§ÌîÑÏÖãÏùÑ ÏßÄÏõêÌïòÎäî ÏöîÏùº Í≥ÑÏÇ∞
// dayOfWeek: Ïõî=1 ... Ïùº=7
// weekOffset: 0=Ïù¥Î≤àÏ£º, 1=Îã§ÏùåÏ£º, -1=Ï†ÄÎ≤àÏ£º, 2=Îã§Îã§ÏùåÏ£º ...
const getWeekday = (date, dayOfWeek, weekOffset = 0) => {
   const result = new Date(startOfWeek(date));
   result.setDate(result.getDate() + (dayOfWeek - 1) + weekOffset * 7);
   result.setHours(0, 0, 0, 0);
   return result;
};

// üîä ÏùåÏÑ± Ï∂úÎ†•
export const speak = text => {
   if ('speechSynthesis' in window) {
      window.speechSynthesis.cancel();
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'ko-KR';
      utterance.rate = 1.2;
      window.speechSynthesis.speak(utterance);
   }
};

// üß† AI ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
export const generateAIPrompt = command => {
   const now = new Date();

   return [
      `Ïò§Îäò = ${formatDate(now, 'YYYY-MM-DD dddd')} (${formatDate(now, 'MMÏõî DDÏùº')})`,
      `ÌòÑÏû¨ ÏãúÍ∞Ñ = ${formatDate(now, 'YYYY-MM-DD HH:mm:ss')}`,
      `Î™ÖÎ†πÏñ¥: "${command}"`,
      ``,
      `**Ï†ïÌôïÌïú ÎÇ†Ïßú Í≥ÑÏÇ∞ (Ïò§Îäò Í∏∞Ï§Ä):**`,
      `Ïñ¥Ï†ú = ${formatDate(addDays(now, -1))}`,
      `Ïò§Îäò = ${formatDate(now)}`,
      `ÎÇ¥Ïùº = ${formatDate(addDays(now, 1))}`,
      `Î™®Î†à = ${formatDate(addDays(now, 2))}`,
      `Í∏ÄÌîº = ${formatDate(addDays(now, 3))}`,
      ``,
      `Ï†àÎåÄ ÏÑ§Î™ÖÌïòÏßÄ Îßà! JSONÎßå Ï∂úÎ†•!`,
      ``,
      `**Ïù¥Î≤àÏ£º ÎÇ†Ïßú:**`,
      `Ïù¥Î≤àÏ£º ÏõîÏöîÏùº = ${formatDate(getWeekday(now, 1, 0))}`,
      `Ïù¥Î≤àÏ£º Î™©ÏöîÏùº = ${formatDate(getWeekday(now, 4, 0))}`,
      ``,
      `**Ï†ïÌôïÌïú Ï£ºÏ∞® Í≥ÑÏÇ∞:**`,
      `Ï†ÄÏ†ÄÎ≤àÏ£º = ${formatDate(startOfWeek(addWeeks(now, -2)))} ~ ${formatDate(endOfWeek(addWeeks(now, -2)))}`,
      `Ï†ÄÎ≤àÏ£º = ${formatDate(startOfWeek(addWeeks(now, -1)))} ~ ${formatDate(endOfWeek(addWeeks(now, -1)))}`,
      `Ïù¥Î≤àÏ£º = ${formatDate(startOfWeek(now))} ~ ${formatDate(endOfWeek(now))}`,
      `Îã§ÏùåÏ£º = ${formatDate(startOfWeek(addWeeks(now, 1)))} ~ ${formatDate(endOfWeek(addWeeks(now, 1)))}`,
      `Îã§Îã§ÏùåÏ£º = ${formatDate(startOfWeek(addWeeks(now, 2)))} ~ ${formatDate(endOfWeek(addWeeks(now, 2)))}`,
      ``,
      `**ÏöîÏùºÎ≥Ñ Ï†ïÌôïÌïú ÎÇ†Ïßú:**`,
      `Ï†ÄÎ≤àÏ£º Î™©ÏöîÏùº = ${formatDate(getWeekday(now, 4, -1))}`,
      `Ïù¥Î≤àÏ£º Î™©ÏöîÏùº = ${formatDate(getWeekday(now, 4, 0))}`,
      `Îã§ÏùåÏ£º Î™©ÏöîÏùº = ${formatDate(getWeekday(now, 4, 1))}`,
      `Îã§Îã§ÏùåÏ£º Î™©ÏöîÏùº = ${formatDate(getWeekday(now, 4, 2))}`,
      ``,
      `**Ï§ëÏöî: ÏùºÏ†ï=ÏïΩÏÜç=ÎØ∏ÌåÖ=ÌöåÏùò=Î™®ÏûÑ (ÎèôÏùº ÏùòÎØ∏)**`,
      ``,
      `**ÌïÑÏàò JSON ÌòïÏãù:**`,
      `{"intent": "add_event", "title": "ÏùºÏ†ï", "startDateTime": "2025-09-08T16:00:00+09:00", "endDateTime": "2025-09-08T17:00:00+09:00", "response": "Ï∂îÍ∞Ä!"}`,
      ``,
      `{"intent": "delete_event", "title": "ÏùºÏ†ï", "startDateTime": "2025-09-08T09:00:00+09:00", "endDateTime": "2025-09-08T10:00:00+09:00", "response": "ÏÇ≠Ï†ú!"}`,
      ``,
      `{"intent": "delete_range", "title": "ÏùºÏ†ï", "startDateTime": "2025-09-01T00:00:00+09:00", "endDateTime": "2025-09-07T23:59:59+09:00", "response": "ÏÇ≠Ï†ú!"}`,
      ``,
      `**ÏÇ≠Ï†ú ÏòàÏãú:**`,
      `"Îã§ÏùåÏ£º Î™©ÏöîÏùº ÏïΩÏÜç ÏÇ≠Ï†ú" -> {"intent": "delete_event", "title": "ÏïΩÏÜç", "startDateTime": "${formatDate(getWeekday(now, 4, 1))}T00:00:00+09:00", "endDateTime": "${formatDate(getWeekday(now, 4, 1))}T23:59:59+09:00", "response": "ÏÇ≠Ï†ú!"}`,
      `"Ïù¥Î≤àÏ£º ÏùºÏ†ï Ï†ÑÎ∂Ä ÏÇ≠Ï†ú" -> {"intent": "delete_range", "title": "ÏùºÏ†ï", "startDateTime": "${formatDate(startOfWeek(now))}T00:00:00+09:00", "endDateTime": "${formatDate(endOfWeek(now))}T23:59:59+09:00", "response": "ÏÇ≠Ï†ú!"}`,
      ``,
      `**Îß§Ïö∞ Ï§ëÏöî:** ÏùºÏ†ï Í¥ÄÎ†®Ïù¥ ÏïÑÎãå Îã®Ïàú ÎåÄÌôîÏùº Í≤ΩÏö∞ ‚Üí {"intent": "clarification", "response": "ÏïàÎÖïÌïòÏÑ∏Ïöî! ÏùºÏ†ï Í¥ÄÎ¶¨Î•º ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî?"}`,
   ].join('\n');
};

// üìù AI ÏùëÎãµ ÌååÏã±
export const parseAIResponse = text => {
   let jsonString = text.replace(/```json\n|\n```/g, '').trim();
   const jsonStart = jsonString.indexOf('{');
   const jsonEnd = jsonString.lastIndexOf('}');
   if (jsonStart !== -1 && jsonEnd !== -1) {
      jsonString = jsonString.substring(jsonStart, jsonEnd + 1);
   }
   jsonString = jsonString.replace(/\/\/.*$/gm, '').trim();

   const eventData = JSON.parse(jsonString);

   if (!eventData.title) eventData.title = 'ÏïΩÏÜç';
   if (!eventData.endDateTime && eventData.startDateTime) {
      const start = new Date(eventData.startDateTime);
      start.setHours(start.getHours() + 1);
      eventData.endDateTime = start.toISOString();
   }

   return eventData;
};
